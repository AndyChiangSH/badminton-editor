import openai
import api
import os
from dotenv import load_dotenv
import time


def generate_prompt(args):
    """Generate prompt
    
    Input: args
    Output: prompt for gpt-3.5-turbo
    """
    
    # Read prompt template
    print("Read prompt template...")
    with open(f"template/{args["template"]}.txt", "r") as f:
        prompt = f.read()
    
    # Get information about player A
    print("Get information about player A...")
    country_A = api.get_country(args["player_A"])["country"]
    age_A = api.get_age(args["player_A"])["age"]
    result = api.get_rank(args["player_A"])
    rank_A = result["rank"]
    category_A = result["category"]
    result = api.get_tournament(args["player_A"])
    tournament_name_A = result["name"]
    tournament_rank_A = result["rank"]
    
    # Get information about player B
    print("Get information about player B...")
    country_B = api.get_country(args["player_B"])["country"]
    age_B = api.get_age(args["player_B"])["age"]
    result = api.get_rank(args["player_B"])
    rank_B = result["rank"]
    category_B = result["category"]
    result = api.get_tournament(args["player_B"])
    tournament_name_B = result["name"]
    tournament_rank_B = result["rank"]
    
    # Get information about H2H
    print("Get information about H2H...")
    result = api.get_h2h(args["player_A"], args["player_B"])
    win_count1 = result["player1-win"]
    win_count2 = result["player2-win"]
    tournament_name_h2h = result["match-details"]["name"]
    
    # Format prompt with information
    print("Format prompt with information...")
    prompt = prompt.format(
        player_A=args["player_A"],
        player_B=args["player_B"],
        competition=args["competition"],
        country_A=country_A,
        age_A=age_A,
        rank_A=rank_A,
        category_A=category_A,
        tournament_name_A=tournament_name_A,
        tournament_rank_A=tournament_rank_A,
        country_B=country_B,
        age_B=age_B,
        rank_B=rank_B,
        category_B=category_B,
        tournament_name_B=tournament_name_B,
        tournament_rank_B=tournament_rank_B,
        win_count1=win_count1,
        win_count2=win_count2,
        tournament_name_h2h=tournament_name_h2h,
    )
    
    return prompt

def generate_news(system_prompt, user_prompt):
    """Generate news
    
    Input: answers from generate_answer()
    Output: news generated by gpt-3.5-turbo
    """
    
    # 載入 .env 檔案中的變數
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    client = openai.OpenAI()
    completion = client.chat.completions.create(
        model=args["model"],
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    news = completion.choices[0].message.content
    
    return news
    

if __name__ == "__main__":
    args = {
        "template": "3",
        "player_A": "TAI Tzu Ying",
        "player_B": "CHEN Yu Fei",
        "competition": "2024 Malaysia Badminton Open Quarterfinals",
        "model": "gpt-4o"
    }
    
    print("Generate prompt...")
    start_time = time.time()
    prompt = generate_prompt(args)
    end_time = time.time()
    print("prompt:\n", prompt)
    print(f"Time for generating prompt: {end_time - start_time} s")
    
    prompt_path = f"prompt/{args["template"]}.txt"
    print(f"Save prompt to {prompt_path}...")
    with open(prompt_path, "w") as f:
        f.write(prompt)

    print("Generate news...")
    system_prompt = "你是羽毛球比賽的記者，請參考範例，並根據給定的細節內容: 必需要提到並仔細描述的事實，與不要描述沒有提供的事實，還有各局比賽描述，使用**繁體中文**為這場比賽寫一篇客觀的新聞。"
    start_time = time.time()
    news = generate_news(system_prompt, prompt)
    end_time = time.time()
    print(f"Time for generating news: {end_time - start_time} s")
    print("news:\n", news)
    
    news_path = f"news/{args["template"]}_{args["model"]}.txt"
    print(f"Save news to {news_path}...")
    with open(news_path, "w") as f:
        f.write(news)
